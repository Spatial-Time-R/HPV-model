min_date <- min(as.numeric(as.Date(visit_dates$lower_bound)), na.rm=T)
min_date <- min(as.numeric(as.Date(visit_dates$lower_bound, origin = '1970-1-1')), na.rm=T)
min_date
min_date = min(visit_dates$lower_bound)
max_date = max(visit_dates$upper_bound)
date_seq <- seq(to = max_date, from = min_date, by = .6*365)
date_seq <- seq(to = max_date, from = min_date, by = .6*365)
max_date
min_date
max_date = max(visit_dates$upper_bound,na.rm=T)
min_date = min(visit_dates$lower_bound,na.rm=T)
date_seq <- seq(to = max_date, from = min_date, by = .6*365)
date_seq
df_all <- data.frame()
this_type = "hpv62"
st = date_seq
inf <- inf_status %>% filter(type == this_type) %>%
select(-type)
head(inf)
head(visit_dates)
dfm <- merge(inf, visit_dates, by = c("subjectId","visitId"))
head(dfm)
intervals <- dfm$int
intervals
intervals <- sort(unique(dfm$int))
intervals
i = 1
dfm %>% filter(int == intervals[i]) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
prev <- array(NA, length(intervals))
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
prev[1]
get_prev <- function(this_type, st){
inf <- inf_status %>% filter(type == this_type) %>%
select(-type)
dfm <- merge(inf, visit_dates, by = c("subjectId","visitId"))
#dfm$date <- as.numeric(as.Date(dfm$date))
intervals <- sort(unique(dfm$int))
prev <- array(NA, length(intervals))
#for( i in 2:length(st)){
#dfm %>% filter(date > st[i-1] & date < st[i] & !is.na(status)) -> dfm_sub
#prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
# }
for(i in c(1:length(interalvals))){
dfm %>% filter(int == intervals[i]) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
}
#prev <- prev[-1]
return(prev)
}
i = 1
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
get_prev <- function(this_type, st){
inf <- inf_status %>% filter(type == this_type) %>%
select(-type)
dfm <- merge(inf, visit_dates, by = c("subjectId","visitId"))
#dfm$date <- as.numeric(as.Date(dfm$date))
intervals <- sort(unique(dfm$int))
prev <- array(NA, length(intervals))
#for( i in 2:length(st)){
#dfm %>% filter(date > st[i-1] & date < st[i] & !is.na(status)) -> dfm_sub
#prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
# }
for(i in c(1:length(interals))){
dfm %>% filter(int == intervals[i]) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
}
#prev <- prev[-1]
return(prev)
}
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
get_prev <- function(this_type, st){
inf <- inf_status %>% filter(type == this_type) %>%
select(-type)
dfm <- merge(inf, visit_dates, by = c("subjectId","visitId"))
#dfm$date <- as.numeric(as.Date(dfm$date))
intervals <- sort(unique(dfm$int))
prev <- array(NA, length(intervals))
#for( i in 2:length(st)){
#dfm %>% filter(date > st[i-1] & date < st[i] & !is.na(status)) -> dfm_sub
#prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
# }
for(i in c(1:length(intervals))){
dfm %>% filter(int == intervals[i]) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
}
#prev <- prev[-1]
return(prev)
}
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
date_seq
length(date_seq)
length(unique(visit_dates$int))
unique(visit_dates$int)
unique(visit_dates$lower_bound,na.rm=T)
date_seq <- seq(to = max_date, from = min_date, by = .5*365)
date_seq
x = unique(visit_dates$lower_bound,na.rm=T)
sort(x)
date_seq <- seq(to = max_date, from = min_date, by = .5*365)
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
df
i = 1
this_type = "hpv62"
st = date_seq
inf <- inf_status %>% filter(type == this_type) %>%
select(-type)
dfm <- merge(inf, visit_dates, by = c("subjectId","visitId"))
head(inf)
head(dfm)
intervals <- sort(unique(dfm$int))
intervals
prev <- array(NA, length(intervals))
i = 1
dfm %>% filter(int == intervals[i]) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
prev
i = 2
dfm %>% filter(int == intervals[i]) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
orev
prev
i
dfm
dfm_sub
intervals[i]
head(dfm)
dfm %>% filter(int == intervals[i]) -> dfm_sub
head(dfm)
head(dfm_sub)
um(dfm_sub$status)/nrow(dfm_sub)
sum(dfm_sub$status)
dfm %>% filter(int == intervals[i] & !is.na(status)) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
prev
get_prev <- function(this_type, st){
inf <- inf_status %>% filter(type == this_type) %>%
select(-type)
dfm <- merge(inf, visit_dates, by = c("subjectId","visitId"))
#dfm$date <- as.numeric(as.Date(dfm$date))
intervals <- sort(unique(dfm$int))
prev <- array(NA, length(intervals))
#for( i in 2:length(st)){
#dfm %>% filter(date > st[i-1] & date < st[i] & !is.na(status)) -> dfm_sub
#prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
# }
for(i in c(1:length(intervals))){
dfm %>% filter(int == intervals[i] & !is.na(status)) -> dfm_sub
prev[i] <- sum(dfm_sub$status)/nrow(dfm_sub)
}
#prev <- prev[-1]
return(prev)
}
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
df
for ( i in 1:length(HPV_types)){
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
df_all <- rbind(df_all,df)
}
df_all <- subset(df_all , df_all$Type %in% Model_types)#paste0("hpv",c(62,84,89,16,51,6)))
df_all$Type <- toupper(df_all$Type)
head(df_all)
dates <- as.Date(unique(df_all$date), origin = '1970-1-1')
p <- ggplot(df_all, aes(x = as.Date(date, origin = '1970-1-1'), y = prev, group = Type)) + geom_line(aes(color = Type))
plot_prev <- p + xlab("") +  scale_color_viridis(discrete = TRUE, option = "magma", end = .8) + xlim(dates[1], dates[length(dates) -2 ]) +
scale_y_continuous(limits = c(0, 0.16), breaks = c(0, 0.02, 0.04, 0.06, 0.08,.1,.12,.14,.16)) +
plot_themes +
theme(axis.line.x = element_line(),
axis.line.y = element_line(),
axis.text.x = element_text(angle=45, vjust = 0.5),
legend.text = element_text(size = 7, color = "black"),
legend.title= element_blank(),
legend.position = c(.2,.82), legend.direction = "horizontal", legend.justification = "left") +
labs(x = "", y = "Prevalence")
plot_prev
library(ggplot2)
library(cowplot)
library(RSQLite)
library(reshape)
library(tidyr)
library(viridis)
library(polycor)
library(corrplot)
library(dplyr)
select <- dplyr::select
summarize <- dplyr::summarise
rename <- dplyr::rename
source("plot_themes.R")
source("./data_formatting/HIM_dataset_functions.R")
# Do you want to save the figures?
save_plots = 1
################################################
# Load in the data:
################################################
dbFilename <- "../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
tableNames <- dbListTables(db)
inf_status <- dbReadTable(db,"infection_status_complete")
visit_dates <- dbReadTable(db,"visit_dates_complete")
clearance_params <- dbReadTable(db, "infection_duration_parameters")
cov_data_v1 <- dbReadTable(db, "covariate_data_baseline_visit")
dbDisconnect(db)
HPV_types <- unique(inf_status$type)
Model_types <- paste0("hpv",c(62,84,89,16,51,6))
visit_dates <- reshape(visit_dates, timevar= "visitId", idvar = "subjectId", direction = "wide")
#numeric_vis_dates <- data.frame(visit_dates$subjectId, apply(visit_dates[,2:11],2,get_numeric_dates))
#names(numeric_vis_dates) <- c("subjectId",paste0("v",c(1:10)))
#names(visit_dates) <- c("subjectId",paste0("v",c(1:10)))
#dfm_dates <- melt(visit_dates, id.vars = "subjectId")
#names(dfm_dates) <- c("subjectId", "visitId","date")
min_date <- min(as.numeric(as.Date(visit_dates$lower_bound, origin = '1970-1-1')), na.rm=T)
max_date <- max(as.numeric(as.Date(dfm_dates$date)), na.rm=T)
r/bin/Rscript
library(ggplot2)
library(cowplot)
library(RSQLite)
library(reshape)
library(tidyr)
library(viridis)
library(polycor)
library(corrplot)
library(dplyr)
select <- dplyr::select
summarize <- dplyr::summarise
rename <- dplyr::rename
source("plot_themes.R")
source("./data_formatting/HIM_dataset_functions.R")
# Do you want to save the figures?
save_plots = 1
head(visit_dates)
dbFilename <- "../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
tableNames <- dbListTables(db)
inf_status <- dbReadTable(db,"infection_status_complete")
visit_dates <- dbReadTable(db,"visit_dates_complete")
clearance_params <- dbReadTable(db, "infection_duration_parameters")
cov_data_v1 <- dbReadTable(db, "covariate_data_baseline_visit")
dbDisconnect(db)
HPV_types <- unique(inf_status$type)
Model_types <- paste0("hpv",c(62,84,89,16,51,6))
head(visit_dates)
in_date = min(visit_dates$lower_bound,na.rm=T)
max_date = max(visit_dates$upper_bound,na.rm=T)
date_seq <- seq(to = max_date, from = min_date, by = .5*365)
min_date = min(visit_dates$lower_bound,na.rm=T)
max_date = max(visit_dates$upper_bound,na.rm=T)
date_seq <- seq(to = max_date, from = min_date, by = .5*365)
df_all <- data.frame()
for ( i in 1:length(HPV_types)){
df <- data.frame(date = date_seq[-1],
Type =HPV_types[i],
prev = get_prev(HPV_types[i], date_seq)
)
df_all <- rbind(df_all,df)
}
df_all <- subset(df_all , df_all$Type %in% Model_types)#paste0("hpv",c(62,84,89,16,51,6)))
df_all$Type <- toupper(df_all$Type)
dates <- as.Date(unique(df_all$date), origin = '1970-1-1')
p <- ggplot(df_all, aes(x = as.Date(date, origin = '1970-1-1'), y = prev, group = Type)) + geom_line(aes(color = Type))
plot_prev <- p + xlab("") +  scale_color_viridis(discrete = TRUE, option = "magma", end = .8) + xlim(dates[1], dates[length(dates) -2 ]) +
scale_y_continuous(limits = c(0, 0.16), breaks = c(0, 0.02, 0.04, 0.06, 0.08,.1,.12,.14,.16)) +
plot_themes +
theme(axis.line.x = element_line(),
axis.line.y = element_line(),
axis.text.x = element_text(angle=45, vjust = 0.5),
legend.text = element_text(size = 7, color = "black"),
legend.title= element_blank(),
legend.position = c(.2,.82), legend.direction = "horizontal", legend.justification = "left") +
labs(x = "", y = "Prevalence")
##
plot_prev
setwd("~/")
setwd("~/Desktop/HPV_manuscript/manuscript_code ")
require(ggplot2)
require(gridExtra)
require(RSQLite)
require(pomp)
require(plyr)
require(dplyr)
source("utility_functions.R")
source("plotting_functions.R")
source("mcap_algorithm.R")
load("cov_names_complete.rda")
theme_set(theme_classic(base_size = 14))
select <- dplyr::select
params_all <- data.frame()
HPV_types <- c("hpv62", "hpv84", "hpv89", "hpv16", "hpv51","hpv6")
param_names <-c(paste0("log_alpha_cov_",c(1:11)),c("log_d0","log_d1","log_d2","log_w"),"log_lambda0","logit_p_initial")
load("covariate_table.rda")
setwd("~/Desktop/HPV_manuscript/manuscript_code /manuscript_figures")
load("covariate_table.rda")
load("../MLE_with_CI_covariates.rda")
load("../MLE_with_CI_covariates_2.rda")
load("covariate_table.rda")
head(mle_df)
cov_table[,1:3]    <- apply(cov_table[,1:3],2,scale, center =T)
cov_table <- covartable %>% select(-c(subjectId, visit))
names(cov_table) <- paste0("cov",c(1:ncol(cov_table)))
cov_table[,1:3]    <- apply(cov_table[,1:3],2,scale, center =T)
df_all <- data.frame()
time_points <- c(0,1,3)
setwd("~/Desktop")
setwd("~/Desktop/HPV_manuscript/manuscript_code /manuscript_figures")
load("../MLE_with_CI_covariates_2.rda")
load("covariate_table.rda")
cov_table <- covartable %>% select(-c(subjectId, visit))
names(cov_table) <- paste0("cov",c(1:ncol(cov_table)))
cov_table[,1:3]    <- apply(cov_table[,1:3],2,scale, center =T)
df_all <- data.frame()
time_points <- c(0,1,3)
k = 0
this_type = HPV_types[i]
table_name <- paste0("results_global_",this_type)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name) %>% filter(!is.na(loglik_se)) %>% arrange(-loglik)
dbDisconnect(db)
load("../MLE_with_CI_covariates_2.rda")
load("covariate_table.rda")
test_params <- params[1,]
cov_alphas <- test_params[grep("cov",names(test_params))]
cov_values <- cov_table[,grep("cov", names(cov_table))]
mean_dur <- exp(test_params["log_mean_gam"])
time_from_infection <- time_points[k]
lambda2 <- array(NA, nrow(cov_table))
cov_values
head(mle_df)
test_params <- mle_df %>% filter(type == "this_type")
test_params
this_type
this_type = "hpv62"
test_params <- mle_df %>% filter(type == this_type)
test_params
head(cov_table)
strsplit(test_params$param_name,"_")
test_params$order <- as.numeric(lapply(strsplit(test_params$param_name,"_"),"[[",[4]))
test_params$order <- as.numeric(lapply(strsplit(test_params$param_name,"_"),"[",[4]))
test_params$order <- as.numeric(lapply(strsplit(test_params$param_name,"_"),"[[")[4])
list(1:3)
as.list(1:3)
lapply(as.list(1:3),"[")
lapply(as.list(1:3),"[[")
test_params$order <- as.numeric(lapply(strsplit(test_params$param_name,"_"),"[")[4])
test_params$order <- lapply(strsplit(test_params$param_name,"_"),"[")[4]
head(test_params)
lapply(strsplit(test_params$param_name,"_"),"[[")[4]
(strsplit(test_params$param_name,"_")
)
test_params$order <- lapply(strsplit(test_params$param_name,"_"),"[[,")[4]
test_params$order <- s.numeric(sapply(strsplit(mle_df$param_name,"_"),"[[",4))
test_params$order <- as.numeric(sapply(strsplit(mle_df$param_name,"_"),"[[",4))
test_params$order <- as.numeric(sapply(strsplit(test_params$param_name,"_"),"[[",4))
test_params
help(contains)
test_params <- mle_df %>% filter(type == this_type) %>% filter(grep("cov",param_name))
test_params <- mle_df %>% filter(type == this_type & "cov" %in% param_name)
test_params
test_params_covs <- test_params[grep("cov",test_params$param_name),]
test_params_covs
test_params <- mle_df %>% filter(type == this_type)
test_params_covs <- test_params[grep("cov",test_params$param_name),]
test_params_covs
test_params_covs <- test_params[grep("cov_9",test_params$param_name),]
test_params_covs
cov_alphas <- as.numeric(test_params_covs %>% arrange(order) %>% select(MLE))#test_params[grep("cov",names(test_params))]
test_params <- mle_df %>% filter(type == this_type)
test_params_covs <- test_params[grep("cov_9",test_params$param_name),]
test_params_covs$order <- as.numeric(sapply(strsplit(test_params$param_name,"_"),"[[",4))
test_params <- mle_df %>% filter(type == this_type)
test_params_covs <- test_params[grep("cov",test_params$param_name),]
test_params_covs$order <- as.numeric(sapply(strsplit(test_params$param_name,"_"),"[[",4))
cov_alphas <- as.numeric(test_params_covs %>% arrange(order) %>% select(MLE))#test_params[grep("cov",names(test_params))]
test_params_covs %>% arrange(order) %>% select(MLE)
cov_alphas <- as.numeric(unlist(test_params_covs %>% arrange(order) %>% select(MLE)))#test_params[grep("cov",names(test_params))]
cov_alphas
test_params_covs
cov_values <- cov_table[,grep("cov", names(cov_table))]
mean_dur <- .5
time_points[k]
time_points
k
k = 1
time_points[k]
lambda2 <- array(NA, nrow(cov_table))
frac_d <- array(NA, nrow(cov_table))
print(time_from_infection)
for( j in 1:nrow(cov_table)){
lambda2[j] = exp(test_params["log_lambda0"])*exp(sum((cov_values[j,])*(cov_alphas)))
# frac_d[j] <- exp(test_params["log_d0"])*exp(-exp(test_params["log_w"])*(time_from_infection))/(lambda2[j] + exp(test_params["log_d0"])*exp(-exp(test_params["log_w"])*(time_from_infection)))
}
test_params
log_lambda0 <- 1
for( j in 1:nrow(cov_table)){
lambda2[j] = exp(log_lambda0*exp(sum((cov_values[j,])*(cov_alphas)))
# frac_d[j] <- exp(test_params["log_d0"])*exp(-exp(test_params["log_w"])*(time_from_infection))/(lambda2[j] + exp(test_params["log_d0"])*exp(-exp(test_params["log_w"])*(time_from_infection)))
}
for( j in 1:nrow(cov_table)){
lambda2[j] = exp(log_lambda0*exp(sum((cov_values[j,])*(cov_alphas))))
# frac_d[j] <- exp(test_params["log_d0"])*exp(-exp(test_params["log_w"])*(time_from_infection))/(lambda2[j] + exp(test_params["log_d0"])*exp(-exp(test_params["log_w"])*(time_from_infection)))
}
head(covartable)
setwd("~/Desktop/Github/HPV-model/Inference/additional_risk_model/results/analysis")
dbFilename <- "../../../../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
tableNames <- dbListTables(db)
tableNames
cov_data_v1 <- dbReadTable(db, "covariate_data_baseline_visit")
head(cov_data_v1)
cov_data_v1 <- dbReadTable(db, "covariate_data")
head(cov_data_v1)
covartable <- dbReadTable(db, "covariate_data") %>% filter(visit == "v1")
head(covartable)
cov_table <- covartable %>% select(-c(subjectId, visit))
head(covartable)
head(cov_table)
cov_table <- covartable %>% select(-c(subjectId, visit,current_smoker_2, steady_partner_2))
head(cov_table)
names(cov_table) <- c(paste0("cov",c(1:ncol(cov_table))),"sexual_subclass")
names(cov_table) <- c(paste0("cov",c(1:ncol(cov_table)-1)),"sexual_subclass")
names(cov_table) <- c(paste0("cov",c(1:(ncol(cov_table)-1))),"sexual_subclass")
head(cov_table)
cov_table[,1:3]    <- apply(cov_table[,1:3],2,scale, center =T)
setwd("~/Desktop/Github/HPV-model/Inference/additional_risk_model/results/analysis")
load("cov_names_complete.rda")
cov_names
mcap_cov_names$cov_name <- revalue(cov_names$cov_name, c("BZ"="Brazil", "MX"="Mexico", "age_sexual_debut" = "age at sexual debut", "condom_use" = "consistent condom use", "current_smoker" = "current smoker", "diff_female" = "recent female sexual partners", "diff_male" = "recent male sexual partners", "steady_partner" = "steady sexual partner"))
cov_names$cov_name <- revalue(cov_names$cov_name, c("BZ"="Brazil", "MX"="Mexico", "age_sexual_debut" = "age at sexual debut", "condom_use" = "consistent condom use", "current_smoker" = "current smoker", "diff_female" = "recent female sexual partners", "diff_male" = "recent male sexual partners", "steady_partner" = "steady sexual partner"))
rename <- dplyr::rename
cov_names$cov_name <- revalue(cov_names$cov_name, c("BZ"="Brazil", "MX"="Mexico", "age_sexual_debut" = "age at sexual debut", "condom_use" = "consistent condom use", "current_smoker" = "current smoker", "diff_female" = "recent female sexual partners", "diff_male" = "recent male sexual partners", "steady_partner" = "steady sexual partner"))
cov_names
cov_names$cov_name <- revalue(cov_names$cov_name, c("BZ"="Brazil", "MX"="Mexico", "age_sexual_debut" = "age at sexual debut", "condom_use" = "consistent condom use", "current_smoker" = "current smoker", "diff_female" = "recent female sexual partners", "diff_male" = "recent male sexual partners", "steady_partner" = "steady sexual partner"))
rename <- plyr::rename
cov_names$cov_name <- revalue(cov_names$cov_name, c("BZ"="Brazil", "MX"="Mexico", "age_sexual_debut" = "age at sexual debut", "condom_use" = "consistent condom use", "current_smoker" = "current smoker", "diff_female" = "recent female sexual partners", "diff_male" = "recent male sexual partners", "steady_partner" = "steady sexual partner"))
cov_names$cov_name
cov_names$cov <- revalue(cov_names$cov, c("BZ"="Brazil", "MX"="Mexico", "age_sexual_debut" = "age at sexual debut", "condom_use" = "consistent condom use", "current_smoker" = "current smoker", "diff_female" = "recent female sexual partners", "diff_male" = "recent male sexual partners", "steady_partner" = "steady sexual partner"))
head(cov_names)
save(cov_names, file = "parameter_names.rda")
par_names <- cov_names
save(par_names, file = "parameter_names.rda")
################################################
## Generate figures from the raw data
################################################
#!/usr/bin/Rscript
library(ggplot2)
library(cowplot)
library(RSQLite)
library(reshape)
library(tidyr)
library(viridis)
library(polycor)
library(corrplot)
library(dplyr)
select <- dplyr::select
summarize <- dplyr::summarise
rename <- dplyr::rename
source("plot_themes.R")
source("../../utility_functions.R")
load("parameter_names.rda")
HPV_types <- paste0("HPV",c(62,84,89,16,51,6))
################################################
## Generate figures from the raw data
################################################
#!/usr/bin/Rscript
library(ggplot2)
library(cowplot)
library(RSQLite)
library(reshape)
library(tidyr)
library(viridis)
library(polycor)
library(corrplot)
library(dplyr)
select <- dplyr::select
summarize <- dplyr::summarise
rename <- dplyr::rename
source("plot_themes.R")
source("../../utility_functions.R")
load("parameter_names.rda")
HPV_types <- paste0("HPV",c(62,84,89,16,51,6))
# Select HPV type (example HPV16)
this_type = "HPV16"
# Do you want to save the figures?
save_plots = 1
results_db <- paste0("../../results/model_results_", this_type, ".sqlite")
profile_param_names <- unique()
table_name <- paste0("profile_results_", profile_param_name)
db <- dbConnect(SQLite(), dbFilename)
df_full <- dbReadTable(db,table_name)
dbDisconnect(db)
param_names
par_names
setwd("~/Desktop/Github/HPV-model/Inference/additional_risk_model/results/analysis")
param_names <- c("log_d0", "log_lambda0")
table_name <- paste0("bivariate_profile_",param_names[1],"_",param_names[2])
table_name
