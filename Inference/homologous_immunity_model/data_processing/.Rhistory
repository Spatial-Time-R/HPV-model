log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
guess
test_params = guess
source("rprocess.R")
pomp_object <- pomp(
data = pomp_data,
times ="visit",
t0=1,
params=unlist(test_params),
rprocess = discrete.time.sim(step.fun=rprocess_additional_risk,delta.t=1),
dmeasure = dmeasure,
rmeasure = rmeasure,
covar = covartab,
tcovar = "visit",
obsnames = obsnames,
statenames = statenames,
paramnames = log_paramnames,
initializer = init_additional_risk
)
names(test_params)
log_paramnames <- names(test_params)
pomp_object <- pomp(
data = pomp_data,
times ="visit",
t0=1,
params=unlist(test_params),
rprocess = discrete.time.sim(step.fun=rprocess_additional_risk,delta.t=1),
dmeasure = dmeasure,
rmeasure = rmeasure,
covar = covartab,
tcovar = "visit",
obsnames = obsnames,
statenames = statenames,
paramnames = log_paramnames,
initializer = init_additional_risk
)
require(dplyr)
require(pomp)
require(parallel)
require(devtools)
install_github("cbreto/panelPomp")
require(panelPomp)
require(RSQLite)
source("utility_functions.R")
load("clearance_params.rda")
type_index = 1
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_zero_visits = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
pomp_filename
db <- dbConnect(SQLite(), data_filename)
covartable <- as.data.frame(dbReadTable(db,"covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
data <- as.data.frame(dbReadTable(db, infection_data_table_name))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
clearance_params
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
if(filter_zero_visits){
for( i in 1:nrow(data)){
cat("filtered")
this_vec <- data[i,names(data)!="subjectId"]
new_vec <- filter_zeros(this_vec)
data[i, names(data)!="subjectId"] <- new_vec
}
}
# Center and scale the continuous covariates (corresponding to age, age at sexual debut, and educational status)
names(covartable) <- c(paste0("cov",c(1:11)), "subjectId", "c_i","cov7_2","cov8_2","visit")
cont_covariates = paste0("cov",c(1:3))
cont_covs <- covartable[,names(covartable) %in% cont_covariates]
cont_covs_scaled <- apply(cont_covs,2, scale, center =T)
covartable[,names(covartable) %in% cont_covariates] <- cont_covs_scaled
## Parameter script for analyses
require(dplyr)
require(pomp)
require(parallel)
require(devtools)
install_github("cbreto/panelPomp")
require(panelPomp)
require(RSQLite)
source("utility_functions.R")
load("clearance_params.rda")
type_index = 1
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_zero_visits = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
## Get the data #---------------------------------------------------------------------------
db <- dbConnect(SQLite(), data_filename)
covartable <- as.data.frame(dbReadTable(db,"covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
data <- as.data.frame(dbReadTable(db, infection_data_table_name))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
library(RSQLite)
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
source("utility_functions.R")
filter_zero_visits = TRUE
if(filter_zero_visits){
for( i in 1:nrow(data)){
cat("filtered")
this_vec <- data[i,names(data)!="subjectId"]
new_vec <- filter_zeros(this_vec)
data[i, names(data)!="subjectId"] <- new_vec
}
}
names(covartable) <- c(paste0("cov",c(1:11)), "subjectId", "c_i","cov7_2","cov8_2","visit")
cont_covariates = paste0("cov",c(1:3))
cont_covs <- covartable[,names(covartable) %in% cont_covariates]
cont_covs_scaled <- apply(cont_covs,2, scale, center =T)
covartable[,names(covartable) %in% cont_covariates] <- cont_covs_scaled
if(file.exists(pomp_filename)){
load(pomp_filename)
print("pomp object exists")
}
pomp_filename
source("make_panel_pomp_object.R")
pompList <- list()
pats <- c(1:nrow(data))
n.pat = length(pats)
n.pat
pompList <- lapply(as.list(pats), FUN = make_pomp_panel)
names(pompList) <- paste0("individual_",c(1:n.pat))
i
nrow(data)
i
i = 3
length(pats)
head(pats)
i = 4
i = 3
infection_data = data
times_data = times
covariates = covartable
n_cov = n_covariates
test_params = guess
log_paramnames <- names(test_params)
n.cov <- length(grep("cov",names(covariates)))
data_i <- infection_data[i,grep("y",names(infection_data))]
data_i
ind <- which(!is.na(data_i))
data_i_complete <- data_i[ind]
covariates_i <- subset(covariates, subjectId == infection_data[i,]$subjectId)
covariates_i
times_i <- times_data[i,grep("v",names(times_data))]
times_i_complete <- times_i[ind]
times_i
times_i_complete
covs <- covariates_i[ind, grep("cov|c_i",names(covariates_i))]
covs
n.vis <- length(times_i)
print(n.vis)
source("make_panel_pomp_object.R")
pats <- c(1:nrow(data))
n.pat = length(pats)
pompList <- lapply(as.list(pats), FUN = make_pomp_panel)
names(pompList) <- paste0("individual_",c(1:n.pat))
hpv <- pompList[[1]]
shared_params <- coef(hpv)[1:(length(coef(hpv)))]
specific_params <- coef(hpv)[!(names(coef(hpv)) %in% names(shared_params)) ]
panelPomp(
object = pompList,
shared = shared_params,
specific = matrix(
data =  specific_params,
nrow = length(specific_params),
ncol = n.pat,
dimnames = list(names(specific_params),
names(pompList))
)
) -> panelHPVShared
s1 <- simulate(hpv)
s1
obs(s1)
states(s1)
## Parameter script for analyses
require(dplyr)
require(pomp)
require(parallel)
require(devtools)
install_github("cbreto/panelPomp")
require(panelPomp)
require(RSQLite)
source("utility_functions.R")
load("clearance_params.rda")
type_index = 1
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_zero_visits = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
## Get the data #-----------------------------------
db <- dbConnect(SQLite(), data_filename)
covartable <- as.data.frame(dbReadTable(db,"covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
data <- as.data.frame(dbReadTable(db, infection_data_table_name))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
nerate the pomp object #---------------------------------------------------------------------------
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
source("data_to_pomp_obj.R")
setwd("~/Desktop/CODE/Analysis/inference/additional_risk_model/data_processing")
setwd("~/Desktop/CODE/Analysis/inference/additional_risk_model")
source("./data_processing/make_panel_pomp_object.R")
source("rprocess.R")
source("./data_processing/make_panel_pomp_object.R")
## Parameter script for analyses
require(dplyr)
require(pomp)
require(parallel)
require(devtools)
install_github("cbreto/panelPomp")
require(panelPomp)
require(RSQLite)
source("utility_functions.R")
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_zero_visits = TRUE
type_index = 4
this_type = HPV_types[type_index]
data_filename <- paste0(".././Data/Data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
db <- dbConnect(SQLite(), data_filename)
covartable <- as.data.frame(dbReadTable(db,"covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
data <- as.data.frame(dbReadTable(db, infection_data_table_name))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
clearance_params
## Generate the pomp object #---------------------------------------------------------------------------
source("rprocess.R")
source("./data_processing/make_panel_pomp_object.R")
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
source("./data_processing/data_to_pomp_object.R")
## Parameter script for analyses
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("utility_functions.R")
type_index = 4
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_zero_visits = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("../Data/Data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
db <- dbConnect(SQLite(), data_filename)
db <- dbConnect(SQLite(), data_filename)
data <- as.data.frame(dbReadTable(db,infection_data_table_name))
covartable <- as.data.frame(dbReadTable(db, "covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
clearance_params
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
source("rprocess.R")
## Parameter script for analyses
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("utility_functions.R")
type_index = 4
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_zero_visits = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("../Data/Data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
## Read in the data  ------------------------------------------------------------------------------------------------
db <- dbConnect(SQLite(), data_filename)
data <- as.data.frame(dbReadTable(db,infection_data_table_name))
covartable <- as.data.frame(dbReadTable(db, "covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
source("rprocess.R")
source("./data_processing/make_one_panel_pomp_unit.R")
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,".rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
log_d0 = log(runif(1,0.0001,5)),
log_d1 = log(runif(1,0.0001,5)),
log_d2= log(runif(1,0.0001,5)),
log_w = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = 2/52
)
source("./data_processing/data_to_pomp_object.R")
this_strain = "hpv16"
dbFilename <- "./results/model_results.sqlite"
table_name <- paste0("results_global_",this_strain)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name)
head(params)
chainId = 1
params <- dbReadTable(db,table_name) %>% filter(chain == chainId)
params
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-n_mif)[1,]
arrange <- dplyr::arrange
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-n_mif)[1,]
params <- dbReadTable(db,table_name) %>% filter(chain == chainId)
head(params)
head(params %>% arrange(n_mif))
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
head(params)
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))[1,]
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
params <- params[1,]
n_mif_completed <- params[1,]$n_mif
n_mif_completed
setwd("~/Desktop/Github/HPV-model/Inference/additional_risk_model/data_processing")
setwd("~/Desktop/Github/HPV-model/Inference/homologous_immunity_model/data_processing")
