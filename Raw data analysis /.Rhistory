n_reps_pfilter = 3
n_particles_pfilter = 5
evaluate_Lhood = TRUE
data_filename <- "../../Data/Data.sqlite"
results_db <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("global_params_", this_type)
output_filename <- paste0("./results/global_likelihood_search_", this_type, ".csv")
chain_filename <- paste0("./results/chain_global_likelihood_search_",chainId,"_",this_type,".rda")
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,"_test.rda")
setwd("../")
#Specify random walk :
rw_sd_vec <- rw.sd(
log_lambda0= 0.01,
log_var_gam= 0,
log_mean_gam = 0,
log_alpha_cov_1 = 0.01,
log_alpha_cov_2 = 0.01,
log_alpha_cov_3 = 0.01,
log_alpha_cov_4 = 0.01,
log_alpha_cov_5 = 0.01,
log_alpha_cov_6 = 0.01,
log_alpha_cov_7 = 0.01,
log_alpha_cov_8 = 0.01,
log_alpha_cov_9 = 0.01,
log_alpha_cov_10 = 0.01,
log_alpha_cov_11 = 0.01,
logit_d = .01,
log_w =0.01,
logit_p_initial = ivp(.05),
logit_fraction_remaining_initial = ivp(.05),
logit_p_prev = ivp(.05),
logit_f_prev = ivp(.05),
logit_FP = 0,
logit_FN = 0,
time_step = 0
)
db <- dbConnect(SQLite(), data_filename)
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
logit_d = logit(runif(1,0.001,.999)),
log_w = log(runif(1,0.0001,10)),
logit_FP = logit(FP_RATE),
logit_FN = logit(FN_RATE),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = TIMESTEP
)
if(file.exists(pomp_filename)){
load(pomp_filename)
}
# Set the parameters -------------------------------------------------
guess.shared <- guess[names(guess) %in% names(coef(panelHPVShared)$shared)]
guess.specific <- guess[!(names(guess) %in% names(coef(panelHPVShared)$shared))]
start <- Sys.time()
mf <- mif2(
panelHPVShared,
Nmif = n_mif,
shared.start = unlist(guess.shared),
specific.start = matrix(
data =  guess.specific,
nrow = length(guess.specific),
ncol = length(panelHPVShared@unit.objects),
dimnames = list(names(guess.specific),
names(panelHPVShared@unit.objects))
),
rw.sd = rw_sd_vec,
cooling.type = "geometric",
cooling.fraction.50 = cooling_rate,
Np = n_particles
)
end <- Sys.time()
filename <- chain_filename
save(mf, file = filename)
start <- Sys.time()
mf <- mif2(
panelHPVShared,
Nmif = n_mif,
shared.start = unlist(guess.shared),
specific.start = matrix(
data =  guess.specific,
nrow = length(guess.specific),
ncol = length(panelHPVShared@unit.objects),
dimnames = list(names(guess.specific),
names(panelHPVShared@unit.objects))
),
rw.sd = rw_sd_vec,
cooling.type = "geometric",
cooling.fraction.50 = cooling_rate,
Np = n_particles
)
end <- Sys.time()
filename <- chain_filename
save(mf, file = filename)
end - start
evaluate_Lhood
ll <- logmeanexp(replicate(n_reps_pfilter,logLik(pfilter(mf,Np=n_particles_pfilter))),se=TRUE)
output <- (data.frame(as.list(coef(mf)$shared),loglik=ll[1],loglik_se=ll[2], n_mif = n_mif_updated, n_part = n_particles_pfilter, chain = chainId))
write.table(output, file = output_filename, sep = ",",col.names = FALSE, append=TRUE)
db <- dbConnect(SQLite(), results_db)
dbWriteTable(db, table_name, output, append = T)
dbDisconnect(db)
setwd("~/Desktop/GitHub/HPV-model/Inference/additional_risk_model")
setwd("~/Desktop/GitHub/HPV-model/Inference/memoryless_model")
## Parameter script for analyses
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("utility_functions.R")
type_index = 4
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_clearance_events = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("../../Data/Data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
## Parameter script for analyses
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("utility_functions.R")
type_index = 4
HPV_types <- c("HPV62", "HPV84", "HPV89", "HPV16", "HPV51", "HPV6")
n_covariates = 11
filter_clearance_events = TRUE
this_type = HPV_types[type_index]
data_filename <- paste0("../../Data/Data.sqlite")
infection_data_table_name <- paste0("infection_data_",this_type)
## Read in the data  ------------------------------------------------------------------------------------------------
db <- dbConnect(SQLite(), data_filename)
data <- as.data.frame(dbReadTable(db,infection_data_table_name))
covartable <- as.data.frame(dbReadTable(db, "covariate_data"))
times <- as.data.frame(dbReadTable(db,"visit_dates"))
clearance_params <- as.data.frame(dbReadTable(db,"infection_duration_parameters"))
dbDisconnect(db)
data <- data[1:10,]
times <- times[1:10,]
covartable <- covartable %>% filter(subjectId %in% unique(data$subjectId))
source("rprocess.R")
source("./data_processing/make_one_panel_pomp_unit.R")
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,"_test.rda")
mean_dur = clearance_params %>% filter(Type == this_type) %>% select(Mean_duration)
var_dur = clearance_params %>% filter(Type == this_type) %>% select(Variance_duration)
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = .5
)
source("./data_processing/data_to_pomp_object.R")
guess <- c(log_lambda0= log(runif(1,0.0001,1)),
log_mean_gam = log(as.numeric(mean_dur)),
log_var_gam = log(as.numeric(var_dur)),
log_alpha_cov_1 = log(runif(1,0.0001,5)),
log_alpha_cov_2 = log(runif(1,0.0001,5)),
log_alpha_cov_3 = log(runif(1,0.0001,5)),
log_alpha_cov_4 = log(runif(1,0.0001,5)),
log_alpha_cov_5 = log(runif(1,0.0001,5)),
log_alpha_cov_6 = log(runif(1,0.0001,5)),
log_alpha_cov_7 = log(runif(1,0.0001,5)),
log_alpha_cov_8 = log(runif(1,0.0001,5)),
log_alpha_cov_9 = log(runif(1,0.0001,5)),
log_alpha_cov_10 = log(runif(1,0.0001,5)),
log_alpha_cov_11 = log(runif(1,0.0001,5)),
logit_FP = logit(.99),
logit_FN = logit(.96),
logit_p_initial = logit(runif(1,0.001,.999)),
logit_fraction_remaining_initial = logit(runif(1,0.001,.999)),
logit_p_prev = logit(runif(1,0.001,.999)),
logit_f_prev = logit(runif(1,0.001,.999)),
time_step = .5
)
source("./data_processing/data_to_pomp_object.R")
setwd("~/Desktop/GitHub/HPV-model/Inference/memoryless_model/example")
library(dplyr)
library(reshape2)
library(plyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("../utility_functions.R")
## Specify the HPV type for the analysis
this_type = "HPV16"
chainId = 1
## Specify fixed parameters
FP_RATE = .99
FN_RATE = .96
TIMESTEP = 1 # 2 week timestep for the simulations
# Specify MIF parameters for
n_mif = 1
n_mif_updated <- n_mif
n_particles = 10
cooling_rate = .75
n_reps_pfilter = 3
n_particles_pfilter = 5
evaluate_Lhood = TRUE
data_filename <- "../../Data/Data.sqlite"
results_db <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("global_params_", this_type)
output_filename <- paste0("./results/global_likelihood_search_", this_type, ".csv")
chain_filename <- paste0("./results/chain_global_likelihood_search_",chainId,"_",this_type,".rda")
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,"_test.rda")
setwd("../")
source("perform_global_search.R")
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("utility_functions.R")
library(dplyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("utility_functions.R")
this_type <- "HPV16"
# If running on a high-performance computing cluster ------------------------------------------------------
args = commandArgs(trailingOnly=TRUE)
chainId = as.numeric(args[1])
# ---------------------------------------
dbFilename <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("results_global_",this_type)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
n_mif_completed <- params[1,]$n_mif
params <- params[1,]  %>% select(-c(loglik, loglik_se, n_mif, n_part,chain,type))
table_name <- paste0("global_params_",this_type)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
n_mif_completed <- params[1,]$n_mif
params <- params[1,]  %>% select(-c(loglik, loglik_se, n_mif, n_part,chain,type))
dbDisconnect(db)
## Find the starting parameters for this chain
dbFilename <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("global_params_",this_type)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
n_mif_completed <- params[1,]$n_mif
params <- params[1,]  %>% select(-c(loglik, loglik_se, n_mif, n_part,chain))
dbDisconnect(db)
guess <- unlist(params)
guess
params
dbFilename <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("global_params_",this_type)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
params
chainId
chainId = 1
chainId = 1
# If running on
## Find the starting parameters for this chain
dbFilename <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("global_params_",this_type)
db <- dbConnect(SQLite(), dbFilename)
params <- dbReadTable(db,table_name) %>% filter(chain == chainId) %>% arrange(-c(n_mif))
n_mif_completed <- params[1,]$n_mif
params <- params[1,]  %>% select(-c(loglik, loglik_se, n_mif, n_part,chain))
dbDisconnect(db)
guess <- unlist(params)
guess
n_mif_completed
cooling_rate = .75
n_mif = 200
n_mif_updated = n_mif_completed + n_mif
n_mif_updated
n_mif = 3
n_particles = 5
n_particles_pfilter = 5
n_reps_pfilter = 3
evaluate_Lhood = TRUE
pomp_filename <- paste0("./pomp_objects/pomp_object_", this_strain, ".rda")
chain_filename <- paste0("chain_",chainId,"_",this_strain,".rda")
output_filename <- paste0("global_likelihood_search_", this_type, ".csv")
source("global_search_methods.R")
pomp_filename <- paste0("./pomp_objects/pomp_object_", this_type, ".rda")
chain_filename <- paste0("chain_",chainId,"_",this_type,".rda")
output_filename <- paste0("global_likelihood_search_", this_type, ".csv")
source("global_search_methods.R")
pomp_filename <- paste0("./pomp_objects/pomp_object_", this_type, "_test.rda")
chain_filename <- paste0("chain_",chainId,"_",this_type,".rda")
output_filename <- paste0("global_likelihood_search_", this_type, ".csv")
source("global_search_methods.R")
#Specify random walk :
rw_sd_vec <- rw.sd(
log_lambda0= 0.005,
log_var_gam= 0,
log_mean_gam = 0,
log_alpha_cov_1 = 0.005,
log_alpha_cov_2 = 0.005,
log_alpha_cov_3 = 0.005,
log_alpha_cov_4 = 0.005,
log_alpha_cov_5 = 0.005,
log_alpha_cov_6 = 0.005,
log_alpha_cov_7 = 0.005,
log_alpha_cov_8 = 0.005,
log_alpha_cov_9 = 0.005,
log_alpha_cov_10 = 0.005,
log_alpha_cov_11 = 0.005,
logit_p_initial = ivp(.02),
logit_fraction_remaining_initial = ivp(.02),
logit_p_prev = 0,
logit_f_prev = 0,
logit_FP = 0,
logit_FN = 0,
time_step = 0
)
source("global_search_methods.R")
results_db <- paste0("./results/model_results_", this_type, ".sqlite")
source("global_search_methods.R")
setwd("~/Desktop/GitHub/HPV-model/Inference/homologous_immunity_model")
source('~/Desktop/GitHub/HPV-model/Inference/memoryless_model/perform_global_search.R')
setwd("~/Desktop/GitHub/HPV-model/Inference/memoryless_model/example")
########################################################################
## Example of global search in likelihood space
########################################################################
library(dplyr)
library(reshape2)
library(plyr)
library(pomp)
library(parallel)
library(devtools)
install_github("cbreto/panelPomp")
library(panelPomp)
library(RSQLite)
source("../utility_functions.R")
# Specify the HPV type for the analysis
this_type = "HPV16"
chainId = 1
# IF running on a high-performance computing cluster --------------------------------------------------------
#args = commandArgs(trailingOnly=TRUE)
#chainId = as.numeric(args[1])
#------------------------------------------------------------------------------------------------------------
## Specify fixed parameters
FP_RATE = .99
FN_RATE = .96
TIMESTEP = 1 # 2 week timestep for the simulations
# Specify MIF parameters for this chain
n_mif = 1
n_mif_updated <- n_mif
n_particles = 10
cooling_rate = .75
n_reps_pfilter = 3
n_particles_pfilter = 5
evaluate_Lhood = TRUE
data_filename <- "../../Data/Data.sqlite"
results_db <- paste0("./results/model_results_", this_type, ".sqlite")
table_name <- paste0("global_params_", this_type)
output_filename <- paste0("./results/global_likelihood_search_", this_type, ".csv")
chain_filename <- paste0("./results/chain_global_likelihood_search_",chainId,"_",this_type,".rda")
pomp_filename <- paste0("./pomp_objects/pomp_object_",this_type,"_test.rda")
setwd("../")
source("perform_global_search.R")
version()
R.Version()
setwd("~/Desktop/GitHub/HPV-model")
setwd("~/Desktop/GitHub/HPV-model/Raw data analysis ")
################################################
## Generate figures from the raw data
################################################
library(ggplot2)
library(cowplot)
library(RSQLite)
library(reshape)
library(tidyr)
library(viridis)
library(polycor)
library(corrplot)
library(dplyr)
select <- dplyr::select
summarize <- dplyr::summarise
rename <- dplyr::rename
source("plot_themes.R")
source("./data_formatting/HIM_dataset_functions.R")
# Do you want to save the figures?
save_plots = 1
################################################
# Load in the data:
################################################
dbFilename <- "../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
tableNames <- dbListTables(db)
inf_status <- dbReadTable(db,"infection_status_complete")
visit_dates <- dbReadTable(db,"visit_dates_complete")
clearance_params <- dbReadTable(db, "infection_duration_parameters")
cov_data_v1 <- dbReadTable(db, "covariate_data_baseline_visit")
dbDisconnect(db)
HPV_types <- unique(inf_status$type)
Model_types <- paste0("hpv",c(62,84,89,16,51,6))
#################################################
cov_data <- make_dummy_var(cov_data_v1$country, cov_data_v1)
cov_data$country <- NULL
cov_data$subjectId <- NULL
cov_data$visit <- NULL
cov_data_test <- as.data.frame(apply(cov_data,2,as.numeric))
cov_data_test$row_sum <- rowSums(cov_data_test)
cov_data_drop <- which(is.na(cov_data_test$row_sum))
cov_data <- cov_data[-cov_data_drop,]
cov_data <- cov_data %>% rename("Brazil"= BZ,
"Mexico" = MX,
"Age at sexual debut" = age_sexual_debut,
"Consistent condom use"= condom_use,
"Current smoker" =  current_smoker,
"Educational level" = educational,
"# Lifetime female sex partners" =  lifetime_female,
"# Lifetime male sex partners" =  lifetime_male,
"# Recent female sex partners" =  diff_female,
"# Recent male sex partners" =  diff_male,
"Steady sex partner" = steady_partner,
"Married" = married,
"# New female partners" = new_female,
"# New male partners" = new_male,
"Age" = age,
"Black/African American" = african_american,
"Hispanic" = hispanic,
"Circumcised" = circumcised)
cov_data$US <- NULL
binary_covs <- lapply(cov_data, class) == "character"
cov_data[, binary_covs] <- lapply(cov_data[, binary_covs], as.factor)
test_full <- hetcor(cov_data)
test_cor_full <- test_full$correlations
save_plots
if(save_plots){
pdf("./Figures/baseline_covariate_correlations.pdf",width = 10, height = 8)
corrplot(test_cor_full, type = 'lower',tl.cex = 1,tl.col = "black", cl.cex = 1)
dev.off()
}
setwd("~/Desktop/GitHub/HPV-model/Inference/additional_risk_model")
setwd("~/Desktop/GitHub/HPV-model/Raw data analysis ")
source('~/Desktop/GitHub/HPV-model/Raw data analysis /raw_data_figs.R')
install.packages("plyr",
"dplyr",
"tidyr",
"reshape2",
"stringr",
"parallel",
"ggplot2",
"cowplot",
"RSQLite",
"corrplot",
"viridis",
"gridExtra",
"devtools",
"pomp"
)
install.packages("plyr", "dplyr", "tidyr", "reshape2", "stringr", "parallel", "ggplot2", "cowplot", "RSQLite", "corrplot", "viridis", "gridExtra", "devtools", "pomp")
install.packages("plyr",
"dplyr",
"tidyr",
"reshape2",
"stringr",
"parallel",
"ggplot2",
"cowplot",
"RSQLite",
"corrplot",
"viridis",
"gridExtra",
"devtools",
"pomp"
)
q()
